import React, { useState } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import Modal from "react-modal"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Modal
import Layout from '../Template/Layout';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
const bookedDates = [
    new Date(2025, 1, 25), // 25 ‡∏Å.‡∏û. 2025
    new Date(2025, 1, 28), // 28 ‡∏Å.‡∏û. 2025
];

const CalendarPicker = () => {
    const [selectedDate, setSelectedDate] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û
    const navigate = useNavigate();

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á
    const highlightBookedDates = (date) => {
        return bookedDates.some((booked) => booked.toDateString() === date.toDateString())
            ? "bg-red-500 text-white rounded-full"  // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏∂‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
            : "";
    };

    const handleConfirm = () => {
        if (!selectedDate) {
            toast.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", { position: "top-center" });
            return;
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isBooked = bookedDates.some(
            (date) => date.toDateString() === selectedDate.toDateString()
        );

        if (isBooked) {
            toast.error("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß", { position: "top-center" });
        } else {
            setIsModalOpen(true); // ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û
        }
    };

    const confirmBooking = () => {
        toast.success("‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π...", { position: "top-center" });
        setIsModalOpen(false);
        setTimeout(() => navigate("/food"), 2000); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥ ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    };

    return (
        <Layout>
            <div className="flex flex-col items-center min-h-screen p-6">
                <h1 className="text-2xl font-semibold mb-6 text-green-700">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏á‡∏≤‡∏ô</h1>

                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
                <div className="flex flex-col md:flex-row justify-between items-start w-full max-w-4xl bg-white p-6 rounded-lg shadow-md">
                    
                    {/* ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° */}
                    <div className="md:w-1/2">
                        <h3 className="text-lg font-bold text-gray-700 mb-3">üìÖ ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°</h3>
                        <DatePicker
                            inline
                            renderDayContents={(day, date) => (
                                <div className={`p-2 ${highlightBookedDates(date)}`}>{day}</div>
                            )}
                        />
                    </div>

                    {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
                    <div className="md:w-1/2 md:ml-6 mt-6 md:mt-0">
                        <h3 className="text-lg font-semibold mb-3 text-gray-700">üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h3>
                        <DatePicker 
                            selected={selectedDate} 
                            onChange={(date) => setSelectedDate(date)} 
                            dateFormat="dd/MM/yyyy" 
                            className="border p-2 rounded w-full text-center"
                            placeholderText="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"
                            showPopperArrow={false}
                            excludeDates={bookedDates} // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
                            minDate={new Date()} // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
                        />
                        <p className="text-sm text-gray-500 mt-2">* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏™‡∏µ‡πÅ‡∏î‡∏á ‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ</p>

                        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° */}
                        <div className="flex gap-3 mt-6">
                            <button 
                                className="flex-1 p-3 bg-green-600 text-white rounded hover:bg-green-700 transition"
                                onClick={handleConfirm}
                            >
                                ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                            </button>
                            <button 
                                className="flex-1 p-3 bg-gray-400 text-white rounded hover:bg-gray-500 transition"
                                onClick={() => setSelectedDate(null)}
                            >
                                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            {/* ‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á */}
            <Modal
                isOpen={isModalOpen}
                onRequestClose={() => setIsModalOpen(false)}
                className="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50"
            >
                <div className="bg-white p-6 rounded-lg shadow-lg max-w-md text-center">
                    <h2 className="text-xl font-semibold mb-4">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h2>
                    <p className="mb-4">‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏á‡∏≤‡∏ô ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <strong>{selectedDate?.toLocaleDateString("th-TH")}</strong> ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</p>
                    <div className="flex justify-center gap-4">
                        <button 
                            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                            onClick={confirmBooking}
                        >
                            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                        </button>
                        <button 
                            className="px-4 py-2 bg-gray-400 text-white rounded hover:bg-gray-500"
                            onClick={() => setIsModalOpen(false)}
                        >
                            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                        </button>
                    </div>
                </div>
            </Modal>

        </Layout>
    );
};

export default CalendarPicker;